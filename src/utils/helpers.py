"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
from datetime import datetime

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M')
    except Exception:
        return date_str

def format_duration(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–∞"""
    hours = minutes // 60
    mins = minutes % 60
    return f"{hours}—á {mins}–º–∏–Ω"

def format_ticket_message(tickets: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∏–ª–µ—Ç–∞—Ö"""
    if not tickets:
        return "‚úàÔ∏è –ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    message_parts = ["üé´ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã:"]

    for i, ticket in enumerate(tickets[:10], 1):
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –∫–∞–∫ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
            price_link = f"[{ticket.get('price', '–Ω/–¥')}‚ÇΩ]({ticket.get('link', '')})"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ —Å –∫–æ–¥–∞–º–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤
            route_info = (
                f"\n{i}. {ticket.get('origin', '')} ({ticket.get('origin_airport', '')}) - "
                f"{ticket.get('destination', '')} ({ticket.get('destination_airport', '')})"
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ª–µ—Ç–µ —Ç—É–¥–∞
            departure_at = ticket.get('departure_at', '–Ω/–¥')
            outbound_info = (
                f"üõ´ –í—ã–ª–µ—Ç: {format_date(departure_at)}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(ticket.get('duration_to', 0))}\n"
                f"–ü–µ—Ä–µ—Å–∞–¥–æ–∫: {ticket.get('transfers', 0)}"
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏
            return_info = ""
            if ticket.get('return_at'):
                return_departure = ticket.get('return_at', '–Ω/–¥')
                return_info = (
                    f"\n–û–±—Ä–∞—Ç–Ω–æ:\n"
                    f"üõ´ –í—ã–ª–µ—Ç: {format_date(return_departure)}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_duration(ticket.get('duration_back', 0))}\n"
                    f"üîÅ –ü–µ—Ä–µ—Å–∞–¥–æ–∫: {ticket.get('return_transfers', ticket.get('transfers', 0))}"
                )
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ
            ticket_info = (
                f"{route_info}\n"
                f"{outbound_info}\n"
                f"{return_info}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_link}\n"
                f"---"
            )

            message_parts.append(ticket_info)

        except KeyError as e:
            print(f"Missing key in ticket data: {e}")
            continue
        except Exception as e:
            print(f"Error formatting ticket: {e}")
            continue

    return "\n".join(message_parts)
