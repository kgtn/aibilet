"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
"""
from datetime import datetime
import logging
logger = logging.getLogger(__name__)

def format_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        dt = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
        return dt.strftime('%d.%m.%Y %H:%M')
    except Exception:
        return date_str

def format_duration(minutes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ—Ç–∞"""
    hours = minutes // 60
    mins = minutes % 60
    return f"{hours}—á {mins}–º–∏–Ω"

def format_price(price: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"{price:,}‚ÇΩ".replace(',', ' ')

def format_ticket_message(tickets_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–∏–ª–µ—Ç–∞–º–∏"""
    if not tickets_data or not tickets_data.get('success') or not tickets_data.get('data'):
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî"
    
    tickets = tickets_data['data']
    currency = tickets_data.get('currency', 'RUB').upper()
    message_parts = []
    
    for i, ticket in enumerate(tickets[:5], 1):
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            departure_at = format_date(ticket['departure_at'])
            return_at = format_date(ticket['return_at']) if ticket.get('return_at') else None
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration_to = format_duration(ticket['duration_to'])
            duration_back = format_duration(ticket['duration_back']) if ticket.get('duration_back') else None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Å–∞–¥–∫–∞—Ö
            transfers_to = format_transfers(ticket.get('transfers', 0))
            transfers_back = format_transfers(ticket.get('return_transfers', 0)) if ticket.get('return_transfers') is not None else None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–∏–ª–µ—Ç
            ticket_link = f"https://www.aviasales.ru{ticket['link']}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∏–ª–µ—Ç–∞
            message = [
                f"{i}. *{ticket.get('airline', '–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è')} {ticket.get('flight_number', '')}*",
                f"üí∞ –¶–µ–Ω–∞: *{format_price(ticket['price'])} {currency}*",
                f"üõ´ –í—ã–ª–µ—Ç: {departure_at}",
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_to} ({transfers_to})"
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–±—Ä–∞—Ç–Ω–æ–º —Ä–µ–π—Å–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if return_at and duration_back and transfers_back:
                message.extend([
                    f"üõ¨ –í–æ–∑–≤—Ä–∞—Ç: {return_at}",
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ: {duration_back} ({transfers_back})"
                ])
            
            message.append(f"üîó [–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç]({ticket_link})")
            message_parts.append("\n".join(message))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–ª–µ—Ç–∞: {e}", exc_info=True)
            continue
    
    if not message_parts:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–∞—Ö üòî"
    
    return "\n\n".join(message_parts)

def format_transfers(count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ—Å–∞–¥–æ–∫"""
    if count == 0:
        return "–±–µ–∑ –ø–µ—Ä–µ—Å–∞–¥–æ–∫"
    elif count == 1:
        return "1 –ø–µ—Ä–µ—Å–∞–¥–∫–∞"
    elif 2 <= count <= 4:
        return f"{count} –ø–µ—Ä–µ—Å–∞–¥–∫–∏"
    else:
        return f"{count} –ø–µ—Ä–µ—Å–∞–¥–æ–∫"
