"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.
"""
import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from src.config import Config
from src.services.openai_service import OpenAIService
from src.services.aviasales_service import AviasalesService
from src.utils.helpers import format_ticket_message

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
openai_service = OpenAIService()
aviasales_service = AviasalesService()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.TELEGRAM_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤. üõ´\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–ª–µ—Ç–µ—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ù–∞–π–¥–∏ –±–∏–ª–µ—Ç—ã –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –ü–∞—Ä–∏–∂ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏—é–Ω—è\n"
        "- –•–æ—á—É —Å–ª–µ—Ç–∞—Ç—å –≤ –ë–∞—Ä—Å–µ–ª–æ–Ω—É –∏–∑ –ü–∏—Ç–µ—Ä–∞ –≤ –∏—é–ª–µ"
    )

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username}: {message.text}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        status_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI
        flight_params = await openai_service.extract_flight_params(message.text)
        
        if not flight_params:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ:\n"
                "- –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
                "- –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è\n"
                "- –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã"
            )
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {flight_params}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_message.edit_text(
            f"üîç –ò—â—É –±–∏–ª–µ—Ç—ã:\n"
            f"‚úàÔ∏è {flight_params['origin']} ({flight_params['origin_airport']}) ‚Üí "
            f"{flight_params['destination']} ({flight_params['destination_airport']})\n"
            f"üìÖ –í—ã–ª–µ—Ç: {flight_params['departure_at']}\n"
            f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {flight_params['return_at'] or '–±–∏–ª–µ—Ç –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü'}"
        )

        # –ò—â–µ–º –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ Aviasales API
        tickets = await aviasales_service.search_tickets(flight_params)
        
        if not tickets:
            await status_message.edit_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∏–ª–µ—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –†–∞–Ω–∂–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é OpenAI
        ranked_result = await openai_service.rank_tickets(tickets)
        
        if not ranked_result or 'ranked_tickets' not in ranked_result:
            await status_message.edit_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response = format_ticket_message(ranked_result['ranked_tickets'])
        await status_message.edit_text("üé´ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:")
        await message.answer(response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        if 'summary' in ranked_result:
            await message.answer(f"üí° {ranked_result['summary']}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
