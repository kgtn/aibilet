"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤.
"""
import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from datetime import datetime

from src.config import Config
from src.services.openai_service import OpenAIService
from src.services.aviasales_service import AviasalesService
from src.utils.helpers import format_ticket_message
from src.services.dialog_state import DialogStateManager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
openai_service = OpenAIService()
aviasales_service = AviasalesService()
dialog_manager = DialogStateManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.TELEGRAM_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    dialog_manager.clear_state(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤. üõ´\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∫—É–¥–∞ –∏ –∫–æ–≥–¥–∞ —Ö–æ—á–µ—à—å –ø–æ–ª–µ—Ç–µ—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –ù–∞–π–¥–∏ –±–∏–ª–µ—Ç—ã –∏–∑ –ú–æ—Å–∫–≤—ã –≤ –ü–∞—Ä–∏–∂ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏—é–Ω—è\n"
        "- –•–æ—á—É —Å–ª–µ—Ç–∞—Ç—å –≤ –ë–∞—Ä—Å–µ–ª–æ–Ω—É –∏–∑ –ü–∏—Ç–µ—Ä–∞ –≤ –∏—é–ª–µ"
    )

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç {message.from_user.username}: {message.text}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        state = dialog_manager.get_state(message.from_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
        status_message = await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é OpenAI
        current_state = {
            'origin': state.origin,
            'destination': state.destination,
            'departure_at': state.departure_at
        }
        flight_params = await openai_service.extract_flight_params(message.text, current_state)
        
        if not flight_params:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª–µ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        state.update_from_params(flight_params)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not state.is_complete:
            missing_params = state.get_missing_params()
            questions = []
            
            if "–≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è" in missing_params:
                questions.append("–ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ª–µ—Ç–µ—Ç—å?")
            if "–≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è" in missing_params:
                questions.append("–í –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å?")
            if "–¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞" in missing_params:
                questions.append("–ö–æ–≥–¥–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–ª–µ—Ç?")
            
            await status_message.edit_text(
                "–ú–Ω–µ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π:\n" +
                "\n".join(f"‚ùì {q}" for q in questions)
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
        is_start_of_month = flight_params.get('date_context', {}).get('is_start_of_month', False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        search_message = (
            f"üîç –ò—â—É –±–∏–ª–µ—Ç—ã:\n"
            f"‚úàÔ∏è {state.origin_city} ({state.origin}) ‚Üí {state.destination_city} ({state.destination})\n"
        )
        
        if is_start_of_month:
            search_message += f"üìÖ –ò—â—É –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å 1 –ø–æ 5 —á–∏—Å–ª–æ\n"
            if state.return_at:
                search_message += f"üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ {(datetime.strptime(state.return_at, '%Y-%m-%d') - datetime.strptime(state.departure_at, '%Y-%m-%d')).days} –¥–Ω–µ–π"
        else:
            search_message += f"üìÖ –í—ã–ª–µ—Ç: {state.departure_at}\n"
            search_message += f"üîÑ –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ: {state.return_at or '–±–∏–ª–µ—Ç –≤ –æ–¥–∏–Ω –∫–æ–Ω–µ—Ü'}"
        
        await status_message.edit_text(search_message)

        # –ò—â–µ–º –±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ Aviasales API
        search_params = state.to_search_params()
        if is_start_of_month:
            search_params['date_context'] = {'is_start_of_month': True}
            if state.return_at:
                search_params['date_context']['return_days'] = (
                    datetime.strptime(state.return_at, '%Y-%m-%d') - 
                    datetime.strptime(state.departure_at, '%Y-%m-%d')
                ).days
            tickets = await aviasales_service.search_tickets_in_range(search_params)
        else:
            tickets = await aviasales_service.search_tickets(search_params)
        
        if not tickets.get('success') or not tickets.get('data'):
            await status_message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∏–ª–µ—Ç–æ–≤ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
            dialog_manager.clear_state(message.from_user.id)
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        response = format_ticket_message(tickets)
        await status_message.edit_text(
            f"üé´ –í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n"
            f"‚úàÔ∏è {state.origin_city} ({state.origin}) ‚Üí {state.destination_city} ({state.destination})\n"
            f"üìÖ {state.departure_at} - {state.return_at or '–±–µ–∑ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞'}\n"
            f"üí∞ –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ {tickets.get('currency', 'RUB').upper()}\n"
        )
        await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        dialog_manager.clear_state(message.from_user.id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        dialog_manager.clear_state(message.from_user.id)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {e}")
